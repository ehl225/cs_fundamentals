1. In your own words, explain what clean code is and why it is important.
  A. Clean code is code that is easy to understand, read, maintain, and manipulate. It's important especially when working with others and with complex projects because it makes it more efficient and easy to collaborate.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Another commonly used object that relies on computers is a stoplight. If the code was not created to an acceptable standard, wrongly manipulated lights could cause vehicular crashes.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. The following is not clean code because there is code that can be extracted AND Refactored.
  Original code:
FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

Refactored code:
FUNCTION convertToCelcius (degrees)
  SET z to (x-32)*(5/9)
END FUNCTION

FUNCTION convertToFahrenheit(degrees)
  SET z to x*1.8000 + 32.00
END FUNCTION

FUNCTION do(x, y)
 IF y = "F" THEN
  CALL convertToCelcius(x)
  PRINT z
 ELSE IF y = "C" THEN
  CALL convertToFahrenheit(x)
  PRINT z
 END IF
END FUNCTION
--------------------------------------------------------------------------------------------------------------------------------------------------
4. The following is clean code because the function follows the DRY rule and is nested appropriately.
Original code:
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

Refactored Code:
FUNCTION calculatePercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
     PRINT percentage
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF
END FUNCTION
--------------------------------------------------------------------------------------------------------------------------------------------------
5.Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.
Original Code:
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Refactored Code:

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
  SET total = subTotal * discountRate + (subTotal * tax)
  SET changeDue = amount - subTotal * discountRate + (subTotal * tax)
  PRINT "Your total due is: " + total
  IF paymentType = 'CASH' THEN
    CALL getPayment RETURNING amount
    PRINT "Change due: " + changeDue
  ELSE IF paymentType = 'CREDIT CARD' THEN
    CALL getPayment RETURNING amount
    PRINT "Your credit card has been charged: " + total
  END IF
END FUNCTION
--------------------------------------------------------------------------------------------------------------------------------------------------
b. The following function checks out a book if there are no issues with the guest's account.
Original Code:
FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

Refactored Code:

FUNCTION checkGuestStatus(book, guest)
SET goodStatus to guest.accountActive AND guest.hasOverdueBooks = 0 AND guest.outstandingFees = 0
IF goodStatus THEN
  APPEND book to guest.books
  SET book.status to "Checked Out"
  PRINT "Your books have been issued."
ELSE
  PRINT "Unable to check out book."
END IF
END FUNCTION
--------------------------------------------------------------------------------------------------------------------------------------------------
c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.
Original Code:

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

Refactored Code:

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END IF
 END FUNCTION
END CLASS

CLASS customerOffers
 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END IF
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END IF
 END FUNCTION
END CLASS
--------------------------------------------------------------------------------------------------------------------------------------------------
Programming Questions

6. Square: Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.


function sumArray (numbers) {
  var total =0;
  for (let i=0; i< numbers.length; i++) {
   total = total + numbers[i];
  }
  if ((Math.sqrt(total)%1)==0) {
    return console.log("The square root is " + Math.sqrt(total));
  } else {
    return console.log(" The sum is not a perfect square. The sum is " + total);
    }
}
var numbers = [1,1,2,3,4,5];
console.log(sumArray(numbers));
--------------------------------------------------------------------------------------------------------------------------------------------------
7. Duplicate: Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

function findDuplicate (numbers) {
  var newArray= [];
  for (let i=0; i < numbers.length; i++) {
  newArray = arr.filter(x => x===2)
  }
  if (newArray.length >0) {
    return true;
  }
  else {
    return false;
  }
}
var numbers= [1,2,3,4,4,5,5,6];
console.log(findDuplicate(numbers));
